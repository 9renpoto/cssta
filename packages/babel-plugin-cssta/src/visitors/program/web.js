/* eslint-disable no-param-reassign */
const fs = require('fs');
const p = require('path');
const mkdirp = require('mkdirp');
const _ = require('lodash/fp');
const { fileStartEndCommentMarkers } = require('../../webUtil');

const getCssFilename = state => p.resolve(
  state.opts.cwd || process.cwd(),
  _.getOr('styles.css', ['opts', 'output'], state)
);

const writeCssToFile = (state) => {
  const { currentWebCss } = state;
  const cssFilename = getCssFilename(state);

  mkdirp.sync(p.dirname(cssFilename));
  fs.writeFileSync(cssFilename, currentWebCss, {
    encoding: 'utf-8',
    flag: 'w+',
  });
};

const removeRange = (startIndex, endIndex, text) =>
  text.slice(0, startIndex) + text.slice(endIndex + 1);

const removeBetween = (startToken, endToken, text) => {
  const startIndex = text.indexOf(startToken);
  const endIndex = text.lastIndexOf(endToken);
  return (startIndex !== -1 && endIndex !== -1)
    ? removeRange(startIndex, endIndex, text)
    : text;
};

let previousCss;
module.exports = {
  enter: (path, state) => {
    const cssFilename = getCssFilename(state);

    if (!state.didRemoveCssFile) {
      _.attempt(() => fs.unlinkSync(cssFilename));
      state.didRemoveCssFile = true;
    }

    let { currentWebCss } = state;

    if (!currentWebCss && !state.didRemoveCssFile) {
      _.attempt(() => fs.readFileSync(cssFilename, 'utf-8'));
    }

    if (!currentWebCss || _.isError(currentWebCss)) {
      currentWebCss = '/* File generated by babel-plugin-cssta */\n';
    }

    const { commentStartMarker, commentEndMarker } = fileStartEndCommentMarkers(state);
    currentWebCss = removeBetween(commentStartMarker, commentEndMarker, currentWebCss);

    state.currentWebCss = currentWebCss;
    previousCss = currentWebCss;
  },
  exit: (path, state) => {
    if (state.currentWebCss !== previousCss) writeCssToFile(state);
  },
};
