const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const _ = require('lodash/fp');
const cssta = require('cssta');
const cssNameGenerator = require('css-class-generator');

const animationKeywords = [
  'alternate',
  'alternate-reverse',
  'backwards',
  'both',
  'ease',
  'ease-in',
  'ease-in-out',
  'ease-out',
  'forwards',
  'infinite',
  'linear',
  'none',
  'normal',
  'paused',
  'reverse',
  'running',
  'step-end',
  'step-start',
  'initial',
  'inherit',
  'unset',
];

const classGenerator = cssNameGenerator();
const animationGenerator = (function* animationGenerator() {
  for (const value of cssNameGenerator()) {
    if (!_.includes(value, animationKeywords)) yield value;
  }
}());

module.exports = () => ({
  visitor: {
    ImportDeclaration(element, state) {
      if (element.node.source.value === 'cssta') {
        const defaultSpecifiers = _.flow(
          _.filter({ type: 'ImportDefaultSpecifier' }),
          _.map('local.name'),
          _.compact
        )(element.node.specifiers);

        const filename = state.file.opts.filename;
        state.csstaReferencesPerFile = _.update( // eslint-disable-line
          [filename],
          existingRefereces => _.concat(existingRefereces || [], defaultSpecifiers),
          state.csstaReferencesPerFile || {}
        );

        element.remove();
      }
    },
    CallExpression(element, state) {
      const { callee } = element.node;
      if (callee.type !== 'Identifier') return;

      const filename = state.file.opts.filename;
      const references = _.getOr([], [filename], state.csstaReferencesPerFile);

      if (references.indexOf(callee.name) === -1) return;

      const [cssNode] = element.node.arguments;
      let css = _.get(['quasis', 0, 'value', 'raw'], cssNode);

      if (css && cssNode.expressions.length > 0) {
        throw new Error('You cannot use interpolation in template strings (i.e. `color: ${primary}`)'); // eslint-disable-line
      }

      if (!css) css = _.get('value', cssNode);
      if (!css) return;

      state.outputIndexPerFile = _.update( // eslint-disable-line
        [filename],
        index => (index || 0) + 1,
        state.outputIndexPerFile || {}
      );

      const index = _.get([filename], state.outputIndexPerFile);

      const cssFilename = path.resolve(
        process.cwd(),
        _.getOr('styles.css', ['opts', 'output'], state)
      );
      let existingCss;

      try {
        existingCss = fs.readFileSync(cssFilename, 'utf-8');
      } catch (e) {
        existingCss = '/* File generated by babel-plugin-cssta */\n';
      }

      const commentMarker = `/* ${filename.replace(/\*/g, '')} (index: ${index}) */`;

      if (existingCss.indexOf(commentMarker) !== -1) {
        throw new Error('You must remove the existing CSS file before running files through babel');
      }

      const { output, classNameMap } = cssta.transform(css, {
        transformClassName: () => classGenerator.next().value,
        transformAnimationName: () => animationGenerator.next().value,
      });

      const outputCss = `${existingCss}\n${commentMarker}\n${output}\n`;

      mkdirp.sync(path.dirname(cssFilename));
      fs.writeFileSync(cssFilename, outputCss, {
        encoding: 'utf-8',
        flag: 'w+',
      });

      if (_.isEmpty(classNameMap)) {
        element.remove();
      } else {
        element.replaceWithSourceString(JSON.stringify(classNameMap));
      }
    },
  },
});
